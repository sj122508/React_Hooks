RULES OF HOOKS
1. Only Call Hooks at the Top Level
    - Don't call Hooks inside loops, condition, or nested functions

2. Only Call Hooks from React functions
    - Call them from within React functional component and just any regular Javascript function


SPREAD OPERATOR - is a feature from es6
    setName({...name, firstName: e.target.value})}
    copy name object then
    modified the firstName

     setItems([...items, {
            id: items.length,
            value: Math.floor(Math.random() * 10) + 1
        }])
    copy name array then
    append/add the new object to array

SUMMARY - useState
1. The useState hook lets you add state to functional components
2. In classes component, the state is always an object
3. With the useState hook, the state doesn`t have to be an object
4. The useState hook returns an array with 2 elements
    The first element is the current value of the state,
    Second element is a state setter function
5. When dealing with objects or arrays, always make sure to spread your state variable and then call the setter function


USE EFFECT
The Effect Hook lets you perform side effects in functional components
The Use Effect called every single render of the component


USE CONTEXT
 - Context provides a way to pass data through the component tree without having to pass props down manually at every level

 USEREDUCER
  - useReducer is a hook that is used for state management
  - It is an alternative to useState hook
   - What's the difference?
   - useState is built using usedReducer
   - When to useReducer vs useState

USECALLBACK
    What - useCallback is a hook that will return a memoized version of the callback function that only changes if one of the 
    dependencies has changed 
    Why - It is useful when passing callbacks to optimized child components that rely on reference equality to prevent
    unnecessary renders.

note**
    if you need to cache a function useCallback
    if you need to cache the result of an invoke function useMemo

USEREF
-To access DOM node
-The useRef Hook allows you to persist values between renders.
-It can be used to store a mutable value that does not cause a re-render when updated.
-It can be used to access a DOM element directly.

CUSTOM HOOKS
- A custom Hook is basically a Javascript function whose name starts with "use"
- A custom hook can also call other Hooks if required
 Why - Share logic - alternative to HOCs and Render Props


REACT INTERVIEW QUESTIONS

 What do you like and dislike about React?
 - Love unidirectional flow from parent to child and the fact that React is pretty much Javascript

 Conditional rendering and List rendering
 - What is the significant of having the key prop when rendering a list of elements

 Class components lifecycle methods
- Learn the mounting phase, the updation phase and the unmounting phase methods
- Order of invocation and a brief description of when you'd use each one of them

Context API
- What is prop drilling, how can you overcome that using the context API

Hooks
- What was the need for Hooks
- Usage of useState, useEffect and useContext

Optimization
- Pure components
- memo
- useMemo and useCallback

How to share logic across components
- Higher order components
- Render props pattern
- Custom Hooks

What are some of the packages that you use with React
- Styling
- Routing
- Form handling
- State management
- Create react app or Custom webpack config

REDUX INTERVIEW QUESTIONS

- What is Redux
 - This is state management, which will solve the problem of prop drilling
- How do you decide wheteher to choose Context API or Redux
 - if its small project Context with useReducer must use, but if its pretty large project 
 redux is definitely must use
- What is the redux store
- What are actions
- What are action creators
- What are reducers
- How the control flows between these different parts
- What exactly does the connect function do from the react-redux library
- What do mapStateToProps and mapDispatchToProps actually do
- Why should you dispatch an action to update the state and not update store directly
- In a reducer, why should you return a new object as state and not modify the existing state object


